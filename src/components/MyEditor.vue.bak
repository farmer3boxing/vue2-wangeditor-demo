<template>
    <div>
        <div>
            <button @click="insertText">insert text</button>
            <button @click="insertNodes">insert nodes</button>
            <button @click="getNodes">getNodes</button>
        </div>
        <div style="border: 1px solid #ccc;">
            <!-- 工具栏 -->
            <Toolbar
                style="border-bottom: 1px solid #ccc"
                :editorId="editorId"
                :defaultConfig="toolbarConfig"
                :mode="mode"
            />

            <!-- 编辑器 -->
            <Editor
                style="height: 500px"

                :editorId="editorId"

                :defaultConfig="editorConfig"
                :defaultContent="getDefaultContent"
                :mode="mode"

                @onCreated="onCreated"
                @onChange="onChange"
                @onDestroyed="onDestroyed"
                @onMaxLength="onMaxLength"
                @onFocus="onFocus"
                @onBlur="onBlur"
                @customAlert="customAlert"
            />
        </div>
    </div>
</template>

<script>
import { SlateTransforms, SlateEditor } from '@wangeditor/editor'
import { Editor, Toolbar, getEditor, removeEditor } from '@wangeditor/editor-for-vue'
import cloneDeep from 'lodash.clonedeep'

// i18nChangeLanguage('en')

export default {
  name: 'MyEditor',
  components: { Editor, Toolbar },
  data() {
        return {
            //【特别注意】
            // 1. editorId Toolbar 和 Editor 的关联，要保持一致
            // 2. 多个编辑器时，每个的 editorId 要唯一
            editorId: 'w-e-1001',

            toolbarConfig: { /* 工具栏配置 */ },
            defaultContent: [
                {
                    type: 'paragraph',
                    children: [
                        { text: '图片' },
                        {
                            type: 'image',
                            src: 'http://www.wangeditor.com/imgs/logo.jpeg',
                            children: [{ text: '' }], // void node 要有一个空 text
                        },
                        { text: 'image' },
                    ],
                },
                {
                    type: 'divider',
                    children: [{ text: '' }],
                },
                {
                    type: 'blockquote',
                    children: [{ text: '一行文字' }],
                },
                {
                    type: 'pre',
                    children: [
                    {
                        type: 'code',
                        language: 'html',
                        children: [{ text: '<div>text</div>' }],
                    },
                    ],
                },
            ],
            editorConfig: {
                placeholder: '请输入内容...',
                // 其他编辑器配置
                // 菜单配置
            },
            mode: 'default', // or 'simple'
            latestContent: []
        }
    },
    computed: {
        getDefaultContent() {
            return cloneDeep(this.defaultContent)
        }
    },
    methods: {
        onCreated(editor) {
            console.log('onCreated', editor)
        },
        onChange(editor) {
            console.log('onChange', editor.children)
            this.latestContent = editor.children
        },
        onDestroyed(editor) {
            console.log('onDestroyed', editor)
        },
        onMaxLength(editor) {
            console.log('onMaxLength', editor)
        },
        onFocus(editor) {
            console.log('onFocus', editor)
        },
        onBlur(editor) {
            console.log('onBlur', editor)
        },
        customAlert(info, type) {
            window.alert(`customAlert in Vue demo\n${type}:\n${info}`)
        },

        insertText() {
            // 获取 editor 实例，即可执行 editor API
            const editor = getEditor(this.editorId)
            if (editor == null) return
            if (editor.selection == null) return

            // 在选区插入一段文字
            editor.insertText('一段文字')
        },

        insertNodes() {
            // 获取 editor 实例，即可执行 editor API
            const editor = getEditor(this.editorId)
            if (editor == null) return
            if (editor.selection == null) return

            // 插入节点
            const p1 = { type: 'paragraph', children: [ { text: 'aaa' } ] }
            const p2 = { type: 'paragraph', children: [ { text: 'bbb' } ] }

            SlateTransforms.insertNodes(editor, [p1, p2])
        },

        getNodes() {
            // 获取 editor 实例，即可执行 editor API
            const editor = getEditor(this.editorId)
            if (editor == null) return
            if (editor.selection == null) return

            const entries = SlateEditor.nodes(editor, {
                match: n => n.type === 'paragraph',
                universal: true,
            })
            for (let entry of entries) {
                console.log(entry)
            }
        }
    },

    // 及时销毁 editor
    beforeDestroy() {
        const editor = getEditor(this.editorId)
        if (editor == null) return

        // 销毁，并移除 editor
        editor.destroy()
        removeEditor(this.editorId)
    },
}
</script>

<style src="@wangeditor/editor/dist/css/style.css"></style>
